#!/bin/sh
# Copyright (c) 2000-2015 Synology Inc. All rights reserved.

PKG_NAME="synology-gitlab-ce"
PKG_PATH="/var/packages/$PKG_NAME"
ETC_PATH="$PKG_PATH/etc"
SCRIPTS_PATH="$PKG_PATH/scripts"
DOCKER_INSPECT="/usr/local/bin/docker_inspect"

###########################################################
# COLORES
###########################################################
RED='\033[0;31m'
NC='\033[0m' # No Color

###########################################################
# FUNCTIONS
###########################################################
check_dependencies() {
  local dependencies_list="$1"
  local dependencies_ok=1

  echo "$dependencies_list" | tr ' ' '\n' | while read item; do
    if [ -z $(which "$item" 2>/dev/null) ]; then
      echo "$item is not installed."
      dependencies_ok=0
    fi
  done

  if [ $dependencies_ok -eq 0 ]; then
    echo "dependencies not met, exiting."
    exit 1
  fi
}

get_latest_version_number_from_dockerhub() {
  local image_name="$1"

  version="$(curl https://hub.docker.com/v2/repositories/"$image_name"/tags 2>/dev/null | jq -r '.results[].name' | tr "\n" ' ')"

  latest=$(echo "$version" | tr ' ' '\n' | while read item; do
    if [ -n "$item" ] && [ "$(expr "$item" : '^[0-9\.]*-ce\.[0-9]$')" -gt 0 ] ; then
      echo "$item"
      break;
    fi
  done)

  if [ -z "$latest" ]; then
    latest="-1"
  fi
  echo "$latest"
}

download_docker_image() {
  local image_name="$1"
  local image_version="$2"

  # shellcheck disable=SC2155
  local image_name_escaped=$(echo "$image_name" | tr '/' '-')
  local success=0
  if [ -z "$(docker images -q $image_name:$image_version 2> /dev/null)" ]; then
    echo "pull image $image_name:$image_version"
    docker pull "$image_name:$image_version" && success=1
  fi
  echo $success
}

port_in_use() {
  local port="$1"
  local in_use=$(netstat -tulpn | grep LISTEN | grep -w "0.0.0.0:$port")
  if [ ! -z "$in_use" ]; then
    echo 1
  else
    echo 0
  fi
}

validate_port() {
  local port="$1"
  local check_use="$2"
  local in_use="0"

  if [ "$(expr "$port" : '^[0-9]\{1,6\}$')" -eq 0 ]; then
      echo "error, port '$port' is invalid"
      exit 1
  fi

  if [ "$(expr "$port" + 0)" -le 0 ]; then
      echo "error, port 0 or lower is not allowed"
      exit 1
  fi

  if [ "$(expr "$port" + 0)" -gt 65535 ]; then
      echo "error, max allowed port 65535"
      exit 1
  fi

  if [ "$check_use" = "1" ]; then
    in_use=$(port_in_use "$port")
    if [ "$in_use" = "1" ]; then
      echo "error, port '$port' is already in use by another service"
      exit 1
    fi
  fi
}

version() {
  echo "$@" | awk -F. '{ printf("%d%03d%03d%03d\n", $1,$2,$3,$4); }';
}