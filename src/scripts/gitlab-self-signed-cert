#!/bin/sh
. "$(dirname $0)"/common

###########################################################
# FUNCTIONS
###########################################################
help()
{
   # Display Help
   echo "Syntax: gitlab-self-signed-cert <action> [<container>] [options]"
   echo "arguments:"
   echo "  action       - install"
   echo "  container    - container name"
   echo "options:"
   echo "  --hostname   - gitlab hostname - default: $GITLAB_HOSTNAME_DEFAULT"
   echo "  --port       - https port - default: $GITLAB_HTTPS_PORT_DEFAULT"
   echo ""
   echo "Example: gitlab-cert install synology-gitlab-ce --hostname=$GITLAB_HOSTNAME_DEFAULT --port=$GITLAB_HTTPS_PORT_DEFAULT"
   exit 0
}

###########################################################
# DEFAULT VARIABLES
###########################################################
# defaults
GITLAB_TMP_DIR="$(dirname $0)/templates"
GITLAB_HOSTNAME_DEFAULT=$(hostname)
GITLAB_HTTPS_PORT_DEFAULT="80443"
GITLAB_INTERNAL_SSL_DIR="/etc/gitlab/ssl"
GITLAB_INTERNAL_CONFIG="/etc/gitlab/gitlab.rb"

# interactive
GITLAB_HOSTNAME=""
GITLAB_HTTPS_PORT=""

###########################################################
# PARAMETER HANDLING
###########################################################
PARAMS=""
for i in "$@"
do
    case ${i} in
      --hostname=*)
          GITLAB_HOSTNAME="${i#*=}"
      ;;
      --port=*)
          GITLAB_HTTPS_PORT="${i#*=}"
      ;;
      -h|--help)
          help
      ;;
      *) # unknown option
          PARAMS="$PARAMS \"$1\""
      ;;
    esac
    shift
done
# set positional arguments in their proper place
eval set -- "$PARAMS"

EXECUTION_MODE="$1"
if [ -z "$EXECUTION_MODE" ] || [ "$EXECUTION_MODE" != "install" ]; then
  echo "error argument action not set!"
  help
fi

###########################################################
# PROCESSING
###########################################################
if [ "$USER" != "root" ]; then
  echo "You must run this script as ROOT!"
  exit
fi
check_dependencies "synowebapi jq docker"

GITLAB_CONTAINER_NAME="$2"
if [ -z "$GITLAB_CONTAINER_NAME" ] ; then
  GITLAB_CONTAINER_NAME="$GITLAB_CONTAINER_NAME_DEFAULT"
fi

CONTAINER_ID=$(docker ps -q -f name=^"$GITLAB_CONTAINER_NAME"$)
if [ -z "$CONTAINER_ID" ]; then
    echo "container $GITLAB_CONTAINER_NAME does not exists, please make sure container is up and running"
    exit  1
fi

if [ -z "$GITLAB_HOSTNAME" ]; then
  read -ep "gitlab hostname? [default: $GITLAB_HOSTNAME_DEFAULT]: " GITLAB_HOSTNAME
  if [ -z "$GITLAB_HOSTNAME" ]; then
    GITLAB_HOSTNAME="$GITLAB_HOSTNAME_DEFAULT"
  fi
fi

if [ -z "$GITLAB_HTTPS_PORT" ]; then
  read -ep "gitlab https port? [default: $GITLAB_HTTPS_PORT_DEFAULT]: " GITLAB_HTTPS_PORT
  if [ -z "$GITLAB_HTTPS_PORT" ]; then
    GITLAB_HTTPS_PORT="$GITLAB_HTTPS_PORT_DEFAULT"
  fi
fi
validate_port $GITLAB_HTTPS_PORT

docker exec "$GITLAB_CONTAINER_NAME" bash -c "mkdir -p $GITLAB_INTERNAL_SSL_DIR"
docker exec "$GITLAB_CONTAINER_NAME" bash -c "openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout \"$GITLAB_INTERNAL_SSL_DIR/$GITLAB_HOSTNAME.key\" -subj \"/C=DE/ST=Germany/L=Duisburg/O=jboxberger/OU=private/CN=$GITLAB_HOSTNAME\" -out \"$GITLAB_INTERNAL_SSL_DIR/$GITLAB_HOSTNAME.crt\""

docker exec "$GITLAB_CONTAINER_NAME" bash -c "cp --backup=t $GITLAB_INTERNAL_CONFIG $GITLAB_INTERNAL_CONFIG.bak"
docker exec "$GITLAB_CONTAINER_NAME" bash -c "sed -i \"s|^[#]*\s*external_url.*$|external_url 'https://$GITLAB_HOSTNAME:$GITLAB_HTTPS_PORT'|\" $GITLAB_INTERNAL_CONFIG"
docker exec "$GITLAB_CONTAINER_NAME" bash -c "sed -i \"s|^[#]*\s*letsencrypt\['enable'\]\s*=\s.*$|letsencrypt\['enable'\] = false|\" $GITLAB_INTERNAL_CONFIG"
docker exec "$GITLAB_CONTAINER_NAME" bash -c "sed -i \"s|^[#]*\s*nginx\['ssl_certificate'\]\s*=\s.*$|nginx\['ssl_certificate'\] = \\\"$GITLAB_INTERNAL_SSL_DIR/$GITLAB_HOSTNAME.crt\\\"|\" $GITLAB_INTERNAL_CONFIG"
docker exec "$GITLAB_CONTAINER_NAME" bash -c "sed -i \"s|^[#]*\s*nginx\['ssl_certificate_key'\]\s*=\s.*$|nginx\['ssl_certificate_key'\] = \\\"$GITLAB_INTERNAL_SSL_DIR/$GITLAB_HOSTNAME.key\\\"|\" $GITLAB_INTERNAL_CONFIG"

docker exec "$GITLAB_CONTAINER_NAME" bash -c "gitlab-ctl reconfigure"
docker exec "$GITLAB_CONTAINER_NAME" bash -c "gitlab-ctl restart"

# add port to container if not mapped
CONTAINER_PORT_EXISTS=$(docker inspect "$GITLAB_CONTAINER_NAME" | jq -r '.[].HostConfig.PortBindings."'$GITLAB_HTTPS_PORT'/tcp"')
if [ "$CONTAINER_PORT_EXISTS" == "null" ]; then
  GITLAB_CONTAINER_CONFIG="$GITLAB_TMP_DIR/$GITLAB_CONTAINER_NAME.cfg.json"

  # export config
  synowebapi --exec api=SYNO.Docker.Container.Profile version=1 method=export name="$GITLAB_CONTAINER_NAME" 2> /dev/null | tail -n +4 | jq --slurp '.[0]' > "$GITLAB_CONTAINER_CONFIG" 2> /dev/null

  if [ -f "$GITLAB_CONTAINER_CONFIG" ]; then
    cat "$GITLAB_CONTAINER_CONFIG" | jq --argjson port '[{"container_port": '$GITLAB_HTTPS_PORT', "host_port": '$GITLAB_HTTPS_PORT', "type": "tcp"}]' '.port_bindings += $port'  > "${GITLAB_CONTAINER_CONFIG}.tmp" && \
    mv "${GITLAB_CONTAINER_CONFIG}.tmp" "${GITLAB_CONTAINER_CONFIG}"
  else
    echo "failed to export configuration"
    exit 1
  fi

  echo "stopping container $GITLAB_CONTAINER_NAME"
  stop_response=$(synowebapi --exec api=SYNO.Docker.Container version=1 method=stop name="$GITLAB_CONTAINER_NAME" 2> /dev/null)
  stop_ok=$(echo "$stop_response" | jq -r ".success")
  if [ "$stop_ok" = "false" ]; then
        echo "failed to stop container, aborting!"
        echo "$stop_response"
        exit 1
  fi

  echo "deleteing container $GITLAB_CONTAINER_NAME"
  delete_response=$(synowebapi --exec api=SYNO.Docker.Container version=1 method=delete name="$GITLAB_CONTAINER_NAME" force=true preserve_profile=false 2> /dev/null)
  delete_ok=$(echo "$delete_response" | jq -r ".success")
  if [ "$delete_ok" = "false" ]; then
    echo "failed to delete container, aborting!"
    echo "$delete_response"
    exit 1
  fi

  echo "creating container $GITLAB_CONTAINER_NAME"
  create_response=$(synowebapi --exec api=SYNO.Docker.Container version=1 method=create is_run_instantly=false profile="$(cat $GITLAB_CONTAINER_CONFIG)" 2> /dev/null)
  create_ok=$(echo "$create_response" | jq -r ".success")
  if [ "$create_ok" = "false" ]; then
    echo "container create failed!"
    echo "$create_response"
    exit 1
  fi

  echo "starting container $GITLAB_CONTAINER_NAME"
  start_response=$(synowebapi --exec api=SYNO.Docker.Container version=1 method=start name="$GITLAB_CONTAINER_NAME" 2> /dev/null)
  start_ok=$(echo "$start_response" | jq -r ".success")
  if [ "$start_ok" = "false" ]; then
    echo "container failed to start!"
    echo "$start_response"
    exit 1
  fi

  # remove tmp config
  rm -f "$GITLAB_CONTAINER_CONFIG"
fi

# update port in link and restart package to take effect
./gitlab-link set "$GITLAB_CONTAINER_NAME" --protocol="https" --port="$GITLAB_HTTPS_PORT"

echo "done!"
exit 0